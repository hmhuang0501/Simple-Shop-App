using System;

namespace CodeSnippets
{
public class CodeSnippets
{
    /// <summary>
    /// Describe the function here
    ///
    /// Answer:
    ///     Compares a string with another reversed string (generated by the reversed character array of the input string)
    ///     and check if they are identical.
    ///     Return a boolean value (False).
    ///     Note that the usage of ToLower() makes the input string case-insensitive
    ///     @param: string
    ///     @return: boolean
    /// 
    /// Rating 1
    /// </summary>
    /// <returns>bool</returns>
    static bool function1(string pattern)
    {
        var parts = pattern.ToCharArray();  // Convert a string to a character array
        Array.Reverse(parts);  // Reverse the character array
        var starp = (new string(parts)).ToLower();  // Apply lower cases to  all the characters in a string 
            
        var b = pattern.ToLower().Equals(starp);  // Check if two strings are equal
        return b;
    }
        
    
    /// <summary>
    /// Describe the function here.
    ///
    /// Answer:
    ///     Array magic: continuously assigns elements in the integer array with other elements within
    ///     the same integer array. At the end will bring to the "original" order of the elements (return 0).
    ///     @param: integer array
    ///     @return: integer, 0
    ///     
    /// Rating 3
    /// </summary>
    /// <returns></returns>
    public static int function2(int[] numbers)
    {
        for (var h = numbers.Length / 2; h > 0; h /= 2)
        {
            for (var i = h; i < numbers.Length; i += 1)
            {
                var temp = numbers[i];  // store item value in a temporary variable
                int t;
                for (t = i; t >= h && numbers[t - h] > temp; t -= h)
                {
                    numbers[t] = numbers[t - h];  // change element value 
                }
                numbers[t] = temp;  // assign the temporary value to index t 
            }
        }
        return 0;
    }
}   // class CodeSnippets
}   // namespace CodeSnippets